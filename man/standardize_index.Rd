% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{standardize_index}
\alias{standardize_index}
\title{#' scale
#'
#' Scale data for factor model estimation and store scaling values
#'
#' @param x a numeric matrix(like object)
#' @param center either a logical value or a numeric vector of length equal to the number of columns of x
#' @param scale either a logical value or a numeric vector of length equal to the number of columns of x
#' @export
#' @useDynLib bdfm
bdfm_scale <- function(x, center = TRUE, scale = TRUE) {
  x <- 100 * (scale(x, center = center, scale = scale))
  options(scaled_scale = attr(x, "scaled:scale"))
  options(scaled_center = attr(x, "scaled:center"))
  return(x)
}}
\usage{
standardize_index(x, Y)
}
\description{
#' unscale
#'
#' Unscale data using values from bdfm::scale
#'
#' @param x a numeric matrix(like object)
#' @param idx An index of which elements of scaled_center and scaled_scale to use
#' @export
#' @useDynLib bdfm
unscale <- function(x, idx = NULL) {
  scaled_center <- getOption("scaled_center")
  scaled_scale <- getOption("scaled_scale")
  if (is.null(idx)) {
    idx <- 1:ncol(x)
  }
  if (is.null(dim(x))) {
    if (length(idx) != 1) {
      stop("Index values idx must have the same length as the number of columns of x")
    }
    if (!is.null(scaled_scale)) {
      x <- scaled_scale[idx] * x / 100
    }
    if (!is.null(scaled_center)) {
      x <- x + scaled_center[idx]
    }
  } else {
    if (length(idx) != ncol(x)) {
      stop("Index values idx must have the same length as the number of columns of x")
    }
    if (!is.null(scaled_scale)) {
      x <- (matrix(1, nrow(x), 1) %x% t(scaled_scale[idx])) * (x / 100)
    }
    if (!is.null(scaled_center)) {
      x <- x + (matrix(1, nrow(x), 1) %x% t(scaled_center[idx]))
    }
  }
  return(x)
}
}
